#!/bin/bash
# -x

echo "half-launcher"
source ./half/setupenv.sh

CLASSPATH="`$LAUNCHER_HOME/classpath.py $FORGE_LIB`"
CLASSPATH+=":$FORGE_JAR"
CLASSPATH+=":$MC_SERVER_JAR"
CLASSPATH+=":$OPENCOM_JAR"
CLASSPATH+=":$OPENCOM_JNLUA_JAR"
CLASSPATH+=":$OPENCOM_LUAJ_JAR"
CLASSPATH+=":$MSGPACK_JAR"

export CLASSPATH=$CLASSPATH

rm -rf $VIRTUAL_BUILD
mkdir $VIRTUAL_BUILD

export CLASSPATH="$OPENCOM_JNLUA_JAR"
CLASSPATH+=":$MSGPACK_JAR"

if [[ "$1" == "shell*" ]]
then
    echo "<mpoc/half/env shell>"
    bash
    echo "<exit>"
    exit
fi

if [[ "$1" != "fastest" ]]
then
    echo "compile *.java"
    find $VIRTUAL_SRC -name "*.java" | xargs $JAVA_HOME/bin/javac -classpath $CLASSPATH -d $VIRTUAL_BUILD
    if [[ $? != 0 ]]; then exit 1; fi
    
    find $MICROPYTHON_JAVA_SRC -name "*.java" | xargs $JAVA_HOME/bin/javac -classpath $CLASSPATH -d $VIRTUAL_BUILD
    if [[ $? != 0 ]]; then exit 1; fi
    
    # echo "compile *.scala"
    # find $VIRTUAL_SRC_BUILD -name "*.scala" | xargs $SCALA_HOME/bin/scalac -classpath $CLASSPATH -d $VIRTUAL_BUILD
    # if [[ $? != 0 ]]; then exit 1; fi
    
    echo "package jar"
    $JAVA_HOME/bin/jar cf $VIRTUAL_JAR $VIRTUAL_MANIFEST -C $VIRTUAL_BUILD .
    if [[ $? != 0 ]]; then exit 1; fi
    
    cd $MICROPYTHON_PORT_HOME
    echo "compile $MICROPYTHON_PORT_LIB_NAME"
    DEBUG=1 make
    if [[ $? != 0 ]]; then exit 1; fi
    
    cp $MICROPYTHON_PORT_LIB $MICROPYTHON_LIB
    cp "$MICROPYTHON_PORT_LIB.map" "$MICROPYTHON_LIB_MAP.map"
fi

cd $LAUNCHER_HOME

export CLASSPATH="$VIRTUAL_JAR"
# CLASSPATH+=":$CLASSPATH"
# CLASSPATH+=":$SCALA_HOME/lib/*"
# CLASSPATH+=":$OPENCOM_JAR"
CLASSPATH+=":$OPENCOM_JNLUA_JAR"
# CLASSPATH+=":$OPENCOM_LUAJ_JAR"
CLASSPATH+=":$MSGPACK_JAR"

if [[ "$1" == "fast" || "$1" == "fastest" ]]
then
    echo "execute PythonState's main"
    shift
    $MPOC_LAUNCH $MPOC_ROM/bios.py $@
    if [[ $? == 1 ]]; then $JAVA_HOME/bin/javap -s org.micropython.jnupy.PythonNativeState; fi
elif [[ "$1" == "slow" ]]
then
    echo "execute jython"
    $JYTHON_HOME/bin/jython ./launch.py $MPOC_ROM/bios.py
elif [[ "$1" == "shell" ]]
then
    BACKUP_PS1="$PS1"
    export PS1="$PS1 [mpoc/half]"
    bash
    export PS1="$BACKUP_PS1"
else
    echo "usage: ./launch half <opt=(fast,slow,shell,shell*)>"
fi

# http://stackoverflow.com/questions/7938402/terminal-in-broken-state-invisible-text-no-echo-after-exit-during-input
stty sane
